import StatsManager from './StatsManager';

export default class StatsOverlay {
  constructor(scene) {
    this.scene = scene;
    this.visible = false;

    const centerX = this.scene.scale.width / 2;
    const centerY = this.scene.scale.height / 2;

    this.box = this.scene.add.rectangle(centerX, centerY, 250, 160, 0x000000, 0.8)
      .setOrigin(0.5)
      .setDepth(999)
      .setVisible(false)
      .setScrollFactor(0)
      .setAlpha(1);

    this.text = this.scene.add.text(centerX, centerY, "", {
      fontSize: "16px",
      color: "#ffffff",
      lineSpacing: 6
    })
    .setOrigin(0.5)
    .setDepth(999)
    .setVisible(false)
    .setScrollFactor(0)
    .setAlpha(1);

    this.text.setWordWrapWidth(240, true);
    this.text.setPadding(10, 10, 10, 10);

    // Just create the key â€” don't set up a listener
    this.toggleKey = scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);
  }

  toggle() {
    console.log('Toggle pressed');
    this.visible = !this.visible;

    this.box.setVisible(this.visible);
    this.text.setVisible(this.visible);

    if (this.visible) {
      this.updateStats();
    }
  }

  updateStats() {
    const statsText = [
      `Day: ${StatsManager.getWorkDayCount()}`,
      `Project Progress: ${StatsManager.getPP()}/${StatsManager.maxProjectProgress}`,
      `Mental Health (MP): ${StatsManager.getMP()}`,
      `Energy: ${StatsManager.getEnergyLevel()}`,
      `Motivation: ${StatsManager.getMotivationLevel()}`,
      `Focus: ${StatsManager.getFocusLevel()}`,
      `Pong Wins: ${StatsManager.getWins()} | Losses: ${StatsManager.getLosses()}`
    ].join('\n');

    this.text.setText(statsText);
  }

  update() {
    // Only check JustDown
    if (Phaser.Input.Keyboard.JustDown(this.toggleKey)) {
      this.toggle();
    }

    if (this.visible) {
      this.updateStats();
    }
  }
}
