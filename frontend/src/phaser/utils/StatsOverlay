import StatsManager from './StatsManager';

export default class StatsOverlay {
  constructor(scene) {
    this.scene = scene;
    this.visible = false;

    const centerX = this.scene.scale.width / 2;
    const centerY = this.scene.scale.height / 2;

    // Rounded, semi-transparent white box with orange border
    this.box = this.scene.add.rectangle(centerX, centerY, 280, 200, 0xffffff, 0.95)
      .setOrigin(0.5)
      .setDepth(999)
      .setScrollFactor(0)
      .setAlpha(1)
      .setVisible(false);
    this.box.setStrokeStyle(2, 0xff9944);

    // Cute text style
    this.text = this.scene.add.text(centerX, centerY, "", {
      fontFamily: "Fredoka",
      fontSize: "16px",
      color: "#333333",
      align: "center",
      lineSpacing: 6,
      wordWrap: { width: 240, useAdvancedWrap: true }
    })
    .setOrigin(0.5)
    .setDepth(999)
    .setScrollFactor(0)
    .setAlpha(1)
    .setVisible(false);

    // Subtle drop shadow effect
    this.text.setShadow(1, 1, "#000000", 0, false, true);

    this.toggleKey = scene.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);
  }

  toggle() {
    this.visible = !this.visible;
    this.box.setVisible(this.visible);
    this.text.setVisible(this.visible);

    if (this.visible) {
      this.updateStats();
    }
  }

  updateStats() {
    const statsText = [
      `Day: ${StatsManager.getWorkDayCount()}`,
      `Project: ${StatsManager.getPP()}/${StatsManager.maxProjectProgress}`,
      `Mental: ${StatsManager.getMP()}`,
      `Energy: ${StatsManager.getEnergyLevel()}`,
      `Motivation: ${StatsManager.getMotivationLevel()}`,
      `Focus: ${StatsManager.getFocusLevel()}`,
      `Pong: ${StatsManager.getWins()} Wins / ${StatsManager.getLosses()} Losses`
    ].join('\n');

    this.text.setText(statsText);
  }

  update() {
    if (Phaser.Input.Keyboard.JustDown(this.toggleKey)) {
      this.toggle();
    }

    if (this.visible) {
      this.updateStats();
    }
  }
}
